#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
labtastic_usage() {
  if [[ -n $long_usage ]]; then
    printf "labtastic - Labtastic App Management CLI\n"
    echo

  else
    printf "labtastic - Labtastic App Management CLI\n"
    echo

  fi

  printf "Usage:\n"
  printf "  labtastic [command]\n"
  printf "  labtastic [command] --help | -h\n"
  printf "  labtastic --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  init      Initialize Labtastic"
  echo "  install   install an app"
  echo "  update    update labtastic"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  PROJECT_NAME"
    printf "    specifies the compose project name\n"
    printf "    Default: labtastic\n"
    echo

  fi
}

# :command.usage
labtastic_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "labtastic init - Initialize Labtastic\n"
    echo

  else
    printf "labtastic init - Initialize Labtastic\n"
    echo

  fi

  printf "Usage:\n"
  printf "  labtastic init [APPDATA]\n"
  printf "  labtastic init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  APPDATA"
    printf "    Base directory for App Data to be stored\n"
    printf "    Default: /srv/labtastic\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  labtastic init\n"
    printf "  labtastic init /data\n"
    echo

  fi
}

# :command.usage
labtastic_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "labtastic install - install an app\n"
    echo

  else
    printf "labtastic install - install an app\n"
    echo

  fi

  printf "Usage:\n"
  printf "  labtastic install APPNAME [options]\n"
  printf "  labtastic install --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --settings-file, -s SETTINGSFILE"
    printf "    settings file location\n"
    printf "    Default: settings.yml\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  APPNAME"
    printf "    name of app to be installed\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  labtastic install base\n"
    printf "  labtastic install base -s settings2.yml\n"
    echo

  fi
}

# :command.usage
labtastic_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "labtastic update - update labtastic\n"
    echo

  else
    printf "labtastic update - update labtastic\n"
    echo

  fi

  printf "Usage:\n"
  printf "  labtastic update\n"
  printf "  labtastic update --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  labtastic update\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/app_setup.sh
setup_app() {
  app_name=$1

  source .env

  if printf '%s\0' "${ENABLED_APPS[@]}" | grep -Fxqz "$app_name"; then
    error "app already installed"
    exit 1
  fi

  echo "# $1 Vars" >> .env
  echo "ENABLED_APPS+=(\"$1\")"
  cat "apps/$1/.env" >> .env
  echo "" >> .env

  mkdir -p "$APP_DATA/$1"

  if [ -d "apps/$1/data" ]; then
    rsync -avh apps/${1}/data/ ${APP_DATA}/${1}/
    find "$APP_DATA/$1" -name ".gitkeep" -type f -delete
  fi
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/docker.sh
generate_compose_files_list() {
  source .env

  files=""

  for app in ${!ENABLED_APPS[@]}; do
    if [[ $app -eq 1 ]]; then
      files="apps/${ENABLED_APPS[$app]}/docker-compose.yml"
    else
      files="${files}:apps/${ENABLED_APPS[$app]}/docker-compose.yml"
    fi
  done

  echo $files
}

generate_compose_profiles() {
  source .env

  profiles=""

  for app in ${!ENABLED_APPS[@]}; do
    if [[ $app -eq 1 ]]; then
      files="${ENABLED_APPS[$app]}"
    else
      files="${files},${ENABLED_APPS[$app]}"
    fi
  done

  echo $profiles
}

docker_compose_setup() {
  docker compose --project-name labtastic --profile "$1-setup" -f apps/${1}/docker-compose.yml up -d
}

docker_compose_up() {
  docker compose --project-name labtastic --profile "$1" -f apps/${1}/docker-compose.yml up -d
}

docker_compose_stop_all() {
  source .env
  for app in ${ENABLED_APPS[@]}; do
    docker compose --project-name labtastic --profile "$app" -f apps/${app}/docker-compose.yml stop
  done
}

docker_compose_stop() {
  docker compose -project-name labtastic --profile "$1" -f apps/${1}/docker-compose.yml stop
}

docker_compose_start_all() {
  source .env
  for app in ${ENABLED_APPS[@]}; do
    docker compose --project-name labtastic --profile "$app" -f apps/${app}/docker-compose.yml start
  done
}

docker_compose_start() {
  docker compose --project-name labtastic --profile "$1" -f apps/${1}/docker-compose.yml start
}

# src/lib/filters.sh
filter_docker_running() {
  docker info > /dev/null 2>&1 || echo "Docker must be running"
}

# src/lib/log.sh
function info() {
  echo "$(green INFO: $@)"
}

function warn() {
  echo "$(yellow WARN: $@)"
}

function error() {
  echo "$(red ERROR: $@)"
}

# src/lib/yaml.sh
yaml_load() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
   local fs

   fs=$(echo @|tr @ '\034')

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
   awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

# :command.command_functions
# :command.function
labtastic_init_command() {
  # src/init_command.sh
  if [ -f ".labtastic-init-done" ]; then
    error "labtastic init already done. exiting..."
    exit 1
  fi

  info "Setting up Labtastic environment..."

  if ! command -v curl &> /dev/null
  then
    error "missing dependency 'curl'"
    exit 1
  fi

  if ! command -v docker &> /dev/null
  then
    info "Installing docker..."
    curl -fsSL https://get.docker.com | bash
    sudo usermod -A -G docker "$(whoami)"
  else
    info "docker already installed"
  fi

  docker network create --subnet "10.255.0.0/16" --attachable labtastic

  if [ ! -d "${args[appdata]}" ]; then
    info "creating app data directory: ${args[appdata]}"
    sudo mkdir -p "${args[appdata]}"
    sudo chown -R "$(id -u):$(id -g)" "${args[appdata]}"
  else
    info "app data directory already exists"
    sudo chown "$(id -u):$(id -g)" "${args[appdata]}"
  fi

  info "creating initial .env config"

  echo "### ENABLED APPS ###" > .env
  echo "ENABLED_APPS=()" >> .env
  echo "### Global ENV Vars ###" >> .env
  echo "# dns base domain" >> .env
  echo "DOMAIN=\"changeme\"" >> .env
  echo "# directory where app data will be stored" >> .env
  echo "APP_DATA=\"${args[appdata]}\"" >> .env
  echo "# Use watchtower to auto update containers" >> .env
  echo "AUTO_UPDATE=\"true\"" >> .env
  echo "" >> .env
  echo "### Application Specific Vars ###" >> .env

  touch .labtastic-init-done

  info "Labtastic is now intialized!"

  echo "${yellow WARNING: Please review and update .env before running './labtastic install'}"

  exit 0
}

# :command.function
labtastic_install_command() {
  # src/install_command.sh
  setup_app "${args[appname]}"

  docker_compose_setup "${args[appname]}"

  docker_compose_up "${args[appname]}"
}

# :command.function
labtastic_update_command() {
  # src/update_command.sh
  info "updating labtastic and apps"

  git pull

  info "finished updating labtastic and apps"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    labtastic_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  export PROJECT_NAME="${PROJECT_NAME:-labtastic}"
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  init )
    action="init"
    shift
    labtastic_init_parse_requirements "$@"
    shift $#
    ;;

  install )
    action="install"
    shift
    labtastic_install_parse_requirements "$@"
    shift $#
    ;;

  update )
    action="update"
    shift
    labtastic_update_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    labtastic_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
labtastic_init_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    labtastic_init_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="init"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[appdata]+x} ]]; then
        # :argument.validations
        args[appdata]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[appdata]:-} ]] || args[appdata]="/srv/labtastic"
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
labtastic_install_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    labtastic_install_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="install"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --settings-file | -s )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--settings-file]="$2"
        shift
        shift
      else
        printf "%s\n" "--settings-file requires an argument: --settings-file, -s SETTINGSFILE"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[appname]+x} ]]; then
        # :argument.validations
        args[appname]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[appname]+x} ]]; then
    printf "missing required argument: APPNAME\nusage: labtastic install APPNAME [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[--settings-file]:-} ]] || args[--settings-file]="settings.yml"
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
labtastic_update_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    labtastic_update_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="update"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "init" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      labtastic_init_usage
    else
      labtastic_init_command
    fi

  elif [[ $action == "install" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      labtastic_install_usage
    else
      labtastic_install_command
    fi

  elif [[ $action == "update" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      labtastic_update_usage
    else
      labtastic_update_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
